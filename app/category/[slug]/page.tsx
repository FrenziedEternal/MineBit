"use client"

import { useState, useMemo } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Filter, Grid, List, X, Info } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useScrollRestoration } from "@/hooks/use-scroll-restoration"
import { CategoryHeader } from "@/components/category-header"
import { ProductGrid } from "@/components/product-grid"
import { categoriesData, getProductsByCategory } from "@/lib/products-data"
import { Footer } from "@/components/footer"

// ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ó‡πá‡∏Å
const tagDescriptions = {
  BP: "Behavior Pack - ‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡πÅ‡∏û‡πá‡∏Ñ‡∏î‡∏≤‡∏ï‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠ Behavior Pack ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
  "BP & RP": "Behavior Pack & Resource Pack - ‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Ñ‡∏î‡∏≤‡∏ï‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏û‡πá‡∏Ñ‡∏†‡∏≤‡∏û",
  RP: "Resource Pack - ‡πÅ‡∏û‡πá‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÄ‡∏Å‡∏°",
  Map: "‡πÅ‡∏°‡∏û - ‡πÇ‡∏•‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢",
  CMD: "Command - ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©",
  APP: "Application - ‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ô‡∏≠‡∏Å‡πÄ‡∏Å‡∏°",
  WEB: "Website - ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏Ç‡∏≤‡∏¢",
}

export default function CategoryPage({ params }: { params: { slug: string } }) {
  const [selectedTags, setSelectedTags] = useState<string[]>([])
  const [sortBy, setSortBy] = useState("newest")
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid")
  const [showTagInfo, setShowTagInfo] = useState(false)

  const category = categoriesData[params.slug as keyof typeof categoriesData]
  const products = getProductsByCategory(params.slug)
  const { navigateBack } = useScrollRestoration()

  // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ
  const availableTags = useMemo(() => {
    if (!category) return []
    return category.availableTags || []
  }, [category])

  // ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const filteredAndSortedProducts = useMemo(() => {
    if (!products) return []

    let filtered = products

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Å
    if (selectedTags.length > 0) {
      filtered = filtered.filter((product) => selectedTags.some((tag) => product.tags.includes(tag)))
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    switch (sortBy) {
      case "price-low":
        return [...filtered].sort((a, b) => a.price - b.price)
      case "price-high":
        return [...filtered].sort((a, b) => b.price - a.price)
      case "name":
        return [...filtered].sort((a, b) => a.name.localeCompare(b.name))
      default:
        return filtered
    }
  }, [products, selectedTags, sortBy])

  const toggleTag = (tag: string) => {
    setSelectedTags((prev) => (prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag]))
  }

  const clearFilters = () => {
    setSelectedTags([])
  }

  if (!category) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-red-400 mb-4">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h1>
          <Link href="/">
            <Button className="bg-red-600 hover:bg-red-700">‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</Button>
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col min-h-screen bg-black text-white">
      {/* Header */}
      <CategoryHeader navigateBack={navigateBack} categoryName={category.name} />

      <div className="container mx-auto px-4 py-8">
        {/* Sort Control */}
        <div className="mb-6">
          <Select value={sortBy} onValueChange={setSortBy}>
            <SelectTrigger className="w-48 bg-gray-900/50 border-red-900/30">
              <SelectValue placeholder="‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="newest">‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</SelectItem>
              <SelectItem value="price-low">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥ - ‡∏™‡∏π‡∏á</SelectItem>
              <SelectItem value="price-high">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á - ‡∏ï‡πà‡∏≥</SelectItem>
              <SelectItem value="name">‡∏ä‡∏∑‡πà‡∏≠ A-Z</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Category Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold mb-4">
            <span className="bg-gradient-to-r from-red-400 to-red-600 bg-clip-text text-transparent">
              {category.name}
            </span>
          </h1>
          <p className="text-gray-300 text-lg max-w-2xl">{category.description}</p>
        </div>

        {/* Tags Filter */}
        {availableTags.length > 0 && (
          <div className="mb-6">
            <div className="flex items-center gap-3 mb-3">
              <h3 className="text-lg font-semibold text-red-400">‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Å:</h3>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowTagInfo(!showTagInfo)}
                className="border-red-900/30 text-gray-400 hover:bg-red-500/10"
              >
                <Info className="w-4 h-4 mr-1" />
                ‡πÄ‡∏Å‡∏£‡πá‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
              </Button>
            </div>

            {/* Tag Info Panel */}
            {showTagInfo && (
              <div className="mb-4 p-4 bg-gray-900/50 border border-red-900/30 rounded-lg">
                <h4 className="text-red-400 font-semibold mb-3">üéì ‡πÄ‡∏Å‡∏£‡πá‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏Å:</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                  {availableTags.map((tag) => (
                    <div key={tag} className="flex items-start space-x-2">
                      <Badge className="bg-red-600/80 text-white text-xs flex-shrink-0">{tag}</Badge>
                      <span className="text-gray-300">{tagDescriptions[tag as keyof typeof tagDescriptions]}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div className="flex flex-wrap gap-2">
              {availableTags.map((tag) => (
                <Button
                  key={tag}
                  variant="outline"
                  size="sm"
                  onClick={() => toggleTag(tag)}
                  className={`${
                    selectedTags.includes(tag)
                      ? "bg-red-600 border-red-600 text-white"
                      : "border-red-900/30 text-gray-400 hover:bg-red-500/10"
                  }`}
                >
                  {tag}
                </Button>
              ))}
              {selectedTags.length > 0 && (
                <Button variant="outline" size="sm" onClick={clearFilters} className="border-red-900/30 text-gray-400">
                  <X className="w-4 h-4 mr-1" />
                  ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                </Button>
              )}
            </div>
          </div>
        )}

        {/* Selected Tags Display */}
        {selectedTags.length > 0 && (
          <div className="mb-6">
            <p className="text-gray-400 text-sm mb-2">‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß: {filteredAndSortedProducts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
            <div className="flex flex-wrap gap-2">
              {selectedTags.map((tag) => (
                <Badge key={tag} className="bg-red-600/80 text-white">
                  {tag}
                  <button onClick={() => toggleTag(tag)} className="ml-1 hover:text-red-200">
                    <X className="w-3 h-3" />
                  </button>
                </Badge>
              ))}
            </div>
          </div>
        )}

        {/* Controls */}
        <div className="flex items-center space-x-4 mb-8">
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setViewMode("grid")}
              className={`${
                viewMode === "grid" ? "bg-red-600 border-red-600 text-white" : "border-red-900/30 text-gray-400"
              }`}
            >
              <Grid className="w-4 h-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setViewMode("list")}
              className={`${
                viewMode === "list" ? "bg-red-600 border-red-600 text-white" : "border-red-900/30 text-gray-400"
              }`}
            >
              <List className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {/* Products Grid/List */}
        {filteredAndSortedProducts.length === 0 && selectedTags.length > 0 ? (
          <div className="text-center py-16">
            <Filter className="w-16 h-16 text-gray-600 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-400 mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
            <p className="text-gray-500 mb-4">‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á</p>
            <Button onClick={clearFilters} className="bg-red-600 hover:bg-red-700">
              ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
            </Button>
          </div>
        ) : (
          <ProductGrid products={filteredAndSortedProducts} viewMode={viewMode} />
        )}
      </div>

      {/* Footer */}
      <Footer />
    </div>
  )
}
